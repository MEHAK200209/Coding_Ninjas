//Data Structures and Algorithms
//Pointers
/*
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    
    int i=10;
    cout<< &i<< endl;
    int *p= &i;
    cout<< p<< endl;
    cout << *p<< endl;
    cout<< sizeof(p)<< endl;
    
    cout<<"-----------------------"<< endl;
    float f= 10.2;
    float *pf= &f;
    cout<< pf<< endl;
    cout << *pf<< endl;
    cout<< sizeof(pf)<< endl;
    
    
     cout<<"-----------------------"<< endl;
    double d= 10.22;
    double *pd= &d;
    cout<< pd<< endl;
    cout << *pd<< endl;
    cout<< sizeof(pd)<< endl;

    return 0;
}

#include<iostream>
using namespace std;
int main(){
	int i=10;
	int *p= &i;
	cout<< i<<" " <<*p<< endl;
	i++;
	cout<< i<<" " <<*p<< endl;
	
	int a= *p;
	a++;
	cout<< a<<" " <<*p<< endl; //value of *p remaims same
	
	i=12;
	cout<< i<< endl;
	cout<< *p<< endl;
	*p= 23;
	
	cout<< i<< endl; //p contains ddress of i, *p contains value of i at tht address, therefore, chnging value of *p will change i too.
	cout<< *p<< endl;
	
	(*p)++;
	cout<< i<< endl;
	cout<< *p<< endl; //*p value incremented by one,so i is also incremented by 1
	return 0;
	
}
//Arithmetic operations on Pointers
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    int i=10;
    int *p = &i;
    
    cout<< p<< endl;
    p=p+1; 
    cout<< p<< endl;   //0x7fffc448fe58       


    p=p+2; 
    cout<< p<< endl; //0x7fffc448fe60 { 8 se 9 then a,b,c,d,e,f, 0)  shift of 8}
    p=p-2;
    cout<< p<< endl; //0x7fffc448fe58
    

    return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
   int a = 7;
int *c = &a;
c = c + 1;
cout  << a << "  " << *c << endl;
    

    return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
   int a = 7;
   
   int *c = &a;
   cout <<c<< endl;
    c = c + 3;
    cout<< c << endl;
    

    return 0;
}

//Arrays and Pointers
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
   int a[10];
   
   a[0] = 7;
   a[1] = 17;
	a[2] = 27;
   a[3] = 37;
   a[4] = 47;
   a[5] = 57;
   a[6] = 67;
   a[7] = 87;
   a[8] = 97;
   a[9] = 70;
   
   
   int *c= &a[0];
   int *d= &a[1];
   int *e= &a[2];
   int *f= &a[3];
   int *g= &a[4];
   int *h= &a[5];
   
   cout<< c<< " "<< d<< " "<< e<< " "<< f<< " "<< g<< " "<< h<< endl;
   //0x6ffdc0 0x6ffdc4 0x6ffdc8 0x6ffdcc 0x6ffdd0 0x6ffdd4

    return 0;
}

#include<iostream>
using namespace std;
int main(){
	int a[10];
	cout<< a<< endl;
	cout<< &a[0]<< endl; //same, because we can treat as pointer, size f array=40, size of poiter= 8
	
	a[0]=5;
	a[1]= 10;
	cout<< *a<< endl;
	cout<< *(a+1)<< endl;
	// array cnt be reassigned, array cant be  assigned to a pointr, but a pointer can be assigned to an aray a=/p but p=a
	
	int *p= &a[0];
	
	cout<< a<< endl;
	cout<< p<< endl;
	
	cout<< &a<< endl;
	cout<< &p<< endl; //store somewhere else
	
	//we can do this
	p = a+1;
	//but we cant do this
	a= a+1;
	return 0;
}
//Sum of integers using pointers
#include<iostream>

using namespace std;
int sum(int *ar , int n)
{
    //write your code here
    int sum=0;
    for(int i=0; i< n; i++){
        sum= sum + *ar; //Dereference the pointer to get the value at the current element
        ar++; //move pointer to next location to get the element value
    }
    return sum;
}
int main()
{
	
    int n;
    cin>>n;
    int ar[n];
    for(int i=0;i<n;i++)
    {
        cin>>ar[i];
    }
    int ans = sum(ar,n);
    cout<<ans;
} 

#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    int a[5];
	int *c;
	cout << sizeof(a) << " " << sizeof(c);
    //he size of an integer in most C++ implementations is 4 bytes (32 bits), so the size of the array a is 5 * 4 = 20 bytes.

    return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    int a[] = {1, 2, 3, 4};
	cout << *(a) << " " << *(a+1);
    return 0;
}
//
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    /*int a[6] = {1, 2, 3};
    cout << a << " " << &a;
    
    int a[3] = {1, 2, 3};
	cout << *(a + 2);
	
	int a[6] = {1, 2, 3};
    int *b = a;
    cout << b[2];
    
    int a[] = {1, 2, 3, 4};
    int *p = a++;
    cout << *p << endl;
    return 0;
}
/*#include<iostream>
using namespace std;
int main(){
	/*char a[]= "1,2,3";
	char b[]= "abc";
	
	cout<< a<< endl;
	cout<< b<< endl;
	
	char *c = &b[0];
	cout<< c<< endl;
	
	char c1= 'a';
	char *pc = &c1;
	
	cout<< c1<< endl;
	cout<< pc<< endl; //aÂ¦o it print until it find null value, so take garbae value
	
	char str= abcdwe';
	char *pstr= "abcdwe";
	
	cout<< str<< endl;
	cout<< pstr<< endl;
	
	
	return 0;
}
//Reverse of a string
#include<iostream>

using namespace std;
void func(char *str) 
{
    //write your code here
    if(str == NULL){
        return;
    }
     int length =0;
     while (str[length] != '\0'){
         length++;
     }
     for(int i=0; i< length/2; i++){
         char temp = str[i];
         str[i] = str[length-i-1];
         str[length-i-1]= temp;

     }
    
}
int main()
{
    char ch[100001];
    int t;
    cin>>t;
    while(t--)
    {
        cin>>ch;
        func(ch);
        cout<<ch;
	cout<<endl;
    }
}

//Pointers and Functions
#include<iostream>
using namespace std;
void print(int *p){
	cout<< *p << endl;
}
void incrementpointer(int *p){
	p= p+1;
}
void increment(int *p){
	(*p)++;
}
int main(){
	int i=10;
	int *p= &i;
	cout<< p<< endl;
	incrementpointer(p);
	cout<< p<< endl;
	
	cout<< *p<< endl;
	increment(p);
	cout<< *p<< endl;
	
	return 0;
}

#include<iostream>
using namespace std;

int sum(int a[], int size){  //this is pointer
	cout<< sizeof(a)<< endl;
	
}
int main(){
	int a[10]; //this is array
	cout<< sizeof(a)<< endl;
	cout<< sum(a,10)<< endl;
	return 0;
	
}

// so we can just simply use it as pointer as well recieveing same output
#include<iostream>
using namespace std;

int sum(int *a, int size){  //this is pointer
	int ans=0;
	for(int i=0; i< size; i++){
		ans+= a[i];
		
	}
	
	
}
int main(){
	int a[10]; //this is array
	cout<< sizeof(a)<< endl;
	cout<< sum(a,10)<< endl;
	return 0;
	
}*/
#include<iostream>
using namespace std;
/*void changeSign(int *p){
  *p = (*p)  *  -1;
}

int main(){
  int a = 10;
  changeSign(&a);
  cout << a << endl;
  return 0;
  void fun(int a[]) {
    cout << a[0] << " ";
}

int main() {
    int a[] = {1, 2, 3, 4};
    fun(a + 1);
    cout << a[0];

}
void square(int *p){
 int a = 10;
 p = &a;
 *p = (*p) * (*p);
}

int main(){
 int a = 10;
 square(&a);
 cout << a << endl;
}

//Swap Two Numbers
#include <iostream>

using namespace std;
void swap(int *a,int *b)
{
    int temp= *a;
    *a=*b;
    *b= temp;
	
}
int main()
{
    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    {
        int a,b;
        cin>>a>>b;
        swap(&a , &b);
        cout<<a<<" "<<b;
        cout<<endl;
    }
}*/
#include<iostream>
using namespace std;
int main(){
	int i=10;
	int *p = &i;
	int **p2 = &p;   //A pointer is a variable that stores address of other variable, and what kid of data is to be stored is characterised by
	cout<< p << endl;                // so to store a pointer's address we have to create a pointer pointer
	cout<< p2 << endl;
	
	return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    /*int arr[] = {4, 5, 6, 7};
    int *p = (arr + 1);
    cout << *arr + 9;
    return 0;
    int numbers[5];
    int * p;
    p = numbers; 
    *p = 10;
    p = &numbers[2]; 
    *p = 20;
    p--; 
    *p = 30;
    p = numbers + 3;
    *p = 40;
    p = numbers;
    *(p+4) = 50;
    for (int n=0; n<5; n++) {
        cout << numbers[n] << ",";
    }
1.  p is assigned to the address of the first element of the array, and *p = 10 sets the first element to 10.
2. p is assigned to the address of the third element, and *p = 20 sets the third element to 20.
3. p is decremented, pointing to the second element, and *p = 30 sets the second element to 30.
4. p is assigned to the address of the fourth element, and *p = 40 sets the fourth element to 40.
5. p is assigned to the address of the first element, and *(p+4) = 50 sets the fifth element to 50.
So, the output is "10 30 20 40 50".
  

    return 0;
}
/Modify Array
/*
#include <iostream>

using namespace std;

void modify(int *ar, int n) {
   int max = ar[0];
    int min = ar[0];

    for (int i = 1; i < n; i++) { 
        if (ar[i] > max) {
            max = ar[i];
        }
        if (ar[i] < min) {
            min = ar[i];
        }
    }

    for (int i = 0; i < n; i++) {
        if (ar[i] == max) {
            ar[i] = 100;
        }
        else if (ar[i] == min) {
            ar[i] = 0;
        }
    }
}

int main()
{
    int n;
    cin>>n;
    int ar[n];
    for(int i=0;i<n;i++)
    {
        cin>>ar[i];
    }
    modify(ar,n);
    for(int i=0;i<n;i++)
    {
        cout<<ar[i]<<" ";
    }
    return 0;
}
#include <iostream>
using namespace std;
int main()
{
  char arr[20];
  int i;
  for(i = 0; i < 10; i++) {
    *(arr + i) = 65 + i;
  }
  *(arr + i) = '\0';
  cout << arr;
  return 0;
}

#include<iostream>
using namespace std;
void swap (char *x, char *y) 
{
  char *t = x;
  x = y;
  y = t;
}

int main()
{
   char *x = "ninjasquiz";
   char *y = "codingninjas";
   char *t;
   swap(x, y);
   cout<<x << " "<<y;
   t = x;
   x = y;
   y = t; 
   cout<<" "<<x<< " "<<y;
   return 0;
}
#include <iostream>
using namespace std;
int main()
{
  float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};
  float *ptr1 = &arr[0];
  float *ptr2 = ptr1 + 3;
  cout<<*ptr2<<" ";
  cout<< ptr2 - ptr1;
  return 0;
}
*/
#include<iostream>
using namespace std;
int main() {
  char st[] = "ABCD";
  for(int i = 0; st[i] != '\0'; i++) {
     cout << st[i] << *(st)+i << *(i+st) << i[st];
  }
  return 0;
}

//Find Maxuimum
#include <iostream>
using namespace std;
#include<bits/stdc++.h>
using namespace std;
int* findmax(int *ar, int n)
{
    int max = ar[0];
    int* max_ptr = &ar[0]; // Pointer to the maximum value

    for(int i = 1; i < n; i++){
        if(ar[i] > max){
            max = ar[i];
            max_ptr = &ar[i]; // Update the pointer to the new maximum value
        }
    }
    
    return max_ptr; // Return the pointer to the maximum value
}
int main()
{
   int n;
   cin>>n;
   int ar[n];
   for(int i=0;i<n;i++)
   {
       cin>>ar[i];
   }
   int *ans =findmax(ar,n);
   cout<<*ans;
    
}

//Reverse an array
#include <iostream>
using namespace std;

void reverseArray(int *arr, int n) {
    int *start = arr;        // Pointer to the beginning of the array
    int *end = arr + n - 1;  // Pointer to the end of the array

    while (start < end) {
        // Swap the elements pointed to by start and end
        int temp = *start;
        *start = *end;
        *end = temp;

        // Move the pointers towards each other
        start++;
        end--;
    }
}

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Original Array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Reverse the array
    reverseArray(arr, n);

    cout << "Reversed Array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
// Type casting
/*#include<iostream>
using namespace std;
int main(){
	int i= 65;
	char c= i; // implicit typecasting: changing ne type of data into another
	
	int *p = &i;
	//char *pc = p; //it will not convert, so we will do explicit typecasting
	//8	13	C:\Users\LENOVO\Documents\cpp\Untitled1.cpp	[Error] cannot convert 'int*' to 'char*' in initialization 
	
	char *pc =(char*) p;
	cout<< pc<< endl;
	cout << p << endl;
	
	cout<< *pc<< endl;
	cout<< (*pc+1)<< endl;
	cout<< (*pc+2)<< endl;
	cout<< (*pc+3)<< endl;
	
}
*/
#include <iostream>
using namespace std;
void updateValue(int *p){
    *p = 610 % 255;
}

int main(){
    char ch = 'A';
    char *pt = &ch;
    updateValue((int*)pt);
    cout << ch;
}
//Reference and Pass by Reference
/*
#include<iostream>
using namespace std;
void increment(int n){
	n++;
}

void incrementref(int& n){
	n++;
}

int& f(int n){
	int a=n; 
	return a;
	
}
int* f2(){
	int i=10; 
	return &i;
	
}
int main(){
	int i;
	i=17;
	increment(i);
	cout<< i<< endl; //reflects no change will print 17
	incrementref(i);
	cout<< i<< endl; //reflects change will print 18, because now both i and  are referring to same memory locations
	int &j = i; //j as reference variable
	i++;
	//since i is incremented, therefore j gives 11, bcx now j is used as reference to the i'th variable value
	
	cout << j<< endl;
	j++;
	cout<< i<< endl; //since both i and j are referrring to same memory loction, therefore it will now give 12, 11+++
	
	int k=100;
	j=k;
	cout<< j<< endl;
	
	int* p = f2();
	
	int &k = f(i);
	
	//if we are returning reference or pointer of a local variable we are making a mistake, thts waste, bcz their scpe is confined to their 
	//function only
	
}

#include <iostream>
using namespace std;

void func(int p){
    cout << p << " ";
}

int main(){
    int i = 10;
    int &p = i;
    func(p++);
    cout << i;
}*/
#include <iostream>
using namespace std;

void func(int i, int& j, int p){
    i++;
    j++;
    p++;
}

int main(){
    int i = 10;
    int j = 6;
    int &p = i;
    func(i, j, p);
    cout << i << " " << j << " " << p;
}
/*
#include<iostream>
using namespace std;
int main(){
	int n;
	cin>> n;
	int arr[n];
	for(int i=0; i<n; i++){
		cin>> arr[i];
	}
	
	for(int i=0; i<n; i++){
		cout<< arr[i]<< " ";
	}
	
}
//Dynamiic Memory Allcation
#include<iostream>
using namespace std;
int main(){
	int *p = new int; //for dynamic memory allocation we use hep memory and to story a variable dynamically we use new keyword.
	*p = 10;
	cout << *p << endl;
	
	double *pd = new double;
	
	char*c = new char;
	
	int *pa = new int[50]; //array- total memory allocated here is: 200 bytes on heap, and 8 bytes on stack
	
	//and in this we can create an array of dyamic size as well
	int n;
	cin>> n;
	int *arr = new int[n];   
	
	for(int i=0; i<n; i++){
		cin>> arr[i];
	}
	
	for(int i=0; i<n; i++){
		cout<< arr[i]<< " ";
	}
	int max = -1; 
	for(int i=0; i<n; i++){
		if(arr[i]> max){
			max = arr[i];
		}
	}
	cout<< "max element is: "<< max<< endl;
	
}
//Deallocate memory
#include<iostream>
using namespace std;
int main(){
	//whenever we create a dynamic memory or heapmemory we need to dlt it
	
	int*p = int new;
	delete p; //single element deletion
	//pointer isnt deleted, at value to which pointer is pointing is deleted;
	int*pa = int new[50];
	delete [] pa; //array deletion
}

//Move zeroes to the end
#include<iostream>
using namespace std;
void movezeroes(int arr[],int n){
    int nonzeroindex = 0;
    int zerocount = 0;

    for(int i=0; i< n; i++){
        if(arr[i]!=0){
            arr[nonzeroindex] = arr[i];
             nonzeroindex++;
        }

        else{
            zerocount++;
        }
    }

    for(int i=nonzeroindex; i< n; i++){
        arr[i]=0;
    }

}
int main()
{
    //write your code here
    int t;
    cin>> t;
    while(t--){
        int n; 
        cin>> n;
        int arr[n];

        for(int i=0;  i<n; i++){
            cin>> arr[i];
        }

        movezeroes(arr, n);
         for(int i=0;  i<n; i++){
            cout<< arr[i]<< " ";
        }
        cout<< endl;

    }
    return 0; 
}*/
// move zeroes using dynamic allocation
#include <iostream>
using namespace std;

void moveZeroes(int* arr, int n) {
    int* result = new int[n];
    int nonZeroIndex = 0;
    int zeroCount = 0;

    for (int i = 0; i < n; i++) {
        if (arr[i] != 0) {
            result[nonZeroIndex] = arr[i];
            nonZeroIndex++;
        } else {
            zeroCount++;
        }
    }

    for (int i = nonZeroIndex; i < n; i++) {
        result[i] = 0;
    }

    // Copy the result array back to the original array
    for (int i = 0; i < n; i++) {
        arr[i] = result[i];
    }

    delete[] result; // Deallocate the dynamically allocated memory
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;
        int* arr = new int[N];

        for (int i = 0; i < N; i++) {
            cin >> arr[i];
        }

        moveZeroes(arr, N);

        for (int i = 0; i < N; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;

        delete[] arr; // Deallocate memory for the input array
    }

    return 0;
}
//Dynamic Allocation of 2-D Arrays
#include<iostream>
using namespace std;
int main(){
	int m,n;
	cin>> m>> n;
	int** p = new int*[m];
	for(int i=0; i< m; i++){
		p[i] = new int[n];
		for(int j=0; j< n; j++){
			cin>> p[i][j];
		}
	}
	
	for(int i=0; i< m; i++){
		delete [] p[i];
	}
	delete [] p;
}
//transpose of a matrix using dynamic allocation 
#include <iostream>
using namespace std;

int main() {
    int T;
    cin >> T;

    while (T--) {
        int M, N;
        cin >> M >> N;

        // Create a dynamic array for the original matrix
        int **matrix = new int *[M];
        for (int i = 0; i < M; i++) {
            matrix[i] = new int[N];
        }

        // Input the matrix elements
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                cin >> matrix[i][j];
            }
        }

        // Create a dynamic array for the transpose matrix
        int **transpose = new int *[N];
        for (int i = 0; i < N; i++) {
            transpose[i] = new int[M];
        }

        // Compute the transpose
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }

        // Print the transpose matrix
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                cout << transpose[i][j] << " ";
            }
            cout << endl;
        }

        // Deallocate memory for both matrices
        for (int i = 0; i < M; i++) {
            delete[] matrix[i];
        }
        delete[] matrix;

        for (int i = 0; i < N; i++) {
            delete[] transpose[i];
        }
        delete[] transpose;
    }

    return 0;
}
int targetSum = 0;
        for (int num : nums) {
            targetSum += num;
        }
        targetSum -= x;
        
        int n = nums.size();
        int left = 0;
        int currentSum = 0;
        int minOperations = INT_MAX;
        
        for (int right = 0; right < n; right++) {
            currentSum += nums[right];
            
            while (currentSum > targetSum && left <= right) {
                currentSum -= nums[left];
                left++;
            }
            
            if (currentSum == targetSum) {
                minOperations = std::min(minOperations, n - (right - left + 1));
            }
        }
        
        return (minOperations != INT_MAX) ? minOperations : -1;

}
/*
Standard Template Library: This library provides us four major templates for following -
Algorithm: Searchig, Sorting, Reverse, Binary-Search
Containers: Arrays, Vectors, Pair, Set
Iterators: v.begin(), v.end() (Iterators provide a uniform interface to navigate through the elements of a container,
regardless of the specific container type (such as vector, list, or map).They allow you to access, modify, and 
iterate over the elements in a container
other functions: max(), min(), swap(), size(), empty()
#include<iostream>
#include<string.h>
#include<algorithm>
using namespace std;
int main(){
	int arr[5]= {5, 7 , 6 , 8, 2};
	memset(arr, -1, sizeof(arr));
	fill(arr, arr + 5, 10);
	sort(arr, arr+5);
	reverse(arr, arr+5);
	swap(arr[0], arr[3]);
	//(L,R) R is included
	sort(arr+1, arr+3+1);
	for(int i=0; i<5;i++){
		cout<< arr[i] <<" ";
	}
	int n = sizeof(arr)/ sizeof(arr[0]);
	cout<< n;
	
}
//K largest Element
#include <iostream>
#include <vector>
#include <algorithm>  // Include the <algorithm> header for sorting
using namespace std;

void Klargest(int arr[], int output[], int n, int k) {
    // Sort the array in non-decreasing order
    sort(arr, arr + n);

    // Copy the K largest elements to the output array
    for (int i = n - k, j = 0; i < n; i++, j++) {
        output[j] = arr[i];
    }
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        int arr[n];
        int brr[k];

        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }

        Klargest(arr, brr, n, k);

        for (int i = 0; i < k; i++) {
            cout << brr[i] << " ";
        }
        cout << endl;
    }
    return 0;
}*/
//VECTORS: They are dynamic array
/*vector <int> v(5)= declares a vector named v of integer type with 5 elements. The number inside the parentheses 
specifies the initial size of the vector, in this case, 5.

vector<int>  v={5}=  declares a vector with one element whose value is 5

vector<int> v[5]=   initializes an empty array of length 5 whose each element is vectors so basically array of vectors (Covered in 2D vectors).

#include<iostream>
#include<vector>
using namespace std;
int main(){
	vector <int> v(5);
	for(int i=0; i<5; i++) cin>> v[i];
	cout<< "size= "<< v.size()<< endl;
	
	v.push_back(6);
	cout<< "after push_back size= "<< v.size()<< endl;
	
	v.pop_back();
	cout<< "before pop_back size= "<< v.size()<< endl;
	
	for(int  i=0;  i<v.size();i++) cout << v[i]<< " ";
	
	cout<< "size= "<< v.size()<<" " <<"capacity: "<< v.capacity()<< endl;
}

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main(){
	vector <int> v(5);
	for(int i=0; i<5; i++){
		cin>> v[i];
	}
	/*vector <int> :: iterator i = v.begin();
	for(; i!= v.end(); i++){
		cout<< *i<<" ";
	}
	cout<< v.at(4)<< endl;// return element at 5th location
	cout<< v.size()<< " "<< v.empty()<< endl;
	
	//empty: return true(1) if container is empty, false(0) otherwise
	v.clear(); //will clear the whole vector
	cout<< v.size()<< " "<< v.empty()<< endl;
	*/
	reverse(v.begin(), v.end());
	for(int i=0; i< 5; i++){
		cout<< v[i]<<" ";
	}
	
	//front and back, front will give you the first element and back will give you the last element
	cout<<"\n"<< v.front() <<" "<< v.back()<< endl ;
	v.erase(v.begin()+2);
	for(int i=0; i< v.size(); i++){
		cout<< v[i]<<" ";
	}
	
	sort(v.begin(), v.end());
	for(int i=0; i< v.size(); i++){
		cout<< v[i]<<" ";
	}
	
}

#include<bits/stdc++.h>
using namespace std;
int main(){
 vector<int>vect;
 vect.push_back(1);
 vect.push_back(3);
 vect.pop_back();
 vect.push_back(2);
 int answer;
 if(vect.empty()){
      answer =  vect.front();
 }
 else{
      answer = vect.back();
 }

 cout << answer;
}
//Kth smallest and largest element in the arrayy
//#include <iostream>
#include <vector>

using namespace std;
#include<algorithm>
vector<int> kthSmallLarge(vector<int> &arr, int n, int k)
{
    sort(arr.begin(), arr.end());

    int kthSmallest, kthLargest;

    kthSmallest = arr[k - 1];

    kthLargest = arr[n - k];

    return {kthSmallest, kthLargest};

}

class Runner
{
    int t;
    vector<vector<int>> arrs;
    vector<int> ns, ks;

public:
    void takeInput()
    {
        cin >> t;
        for (int i = 0; i < t; i++)
        {
            int n, k;
            cin >> n >> k;

            vector<int> arr(n);
            for(int i = 0; i < n; i++) 
            {
                cin >> arr[i];
            }

            ns.push_back(n);
            ks.push_back(k);
            arrs.push_back(arr);
        }
    }

    void execute()
    {
        vector<vector<int>> arrsCopy = arrs;
        vector<int> nsCopy = ns;
        vector<int> ksCopy = ks;
        for (int i = 0; i < t; i++)
        {
            vector<int> result = kthSmallLarge(arrsCopy[i], nsCopy[i], ksCopy[i]);
        }
    }

    void executeAndPrintOutput()
    {
        for (int i = 0; i < t; i++)
        {
            vector<int> result = kthSmallLarge(arrs[i], ns[i], ks[i]);
            cout << result[0] << ' ' << result[1] << '\n';
        }
    }
};

int main()
{   
    Runner runner;
    runner.takeInput();
    runner.executeAndPrintOutput();
    return 0;
}










