//Data Structures and Algorithms
//Pointers
/*
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    
    int i=10;
    cout<< &i<< endl;
    int *p= &i;
    cout<< p<< endl;
    cout << *p<< endl;
    cout<< sizeof(p)<< endl;
    
    cout<<"-----------------------"<< endl;
    float f= 10.2;
    float *pf= &f;
    cout<< pf<< endl;
    cout << *pf<< endl;
    cout<< sizeof(pf)<< endl;
    
    
     cout<<"-----------------------"<< endl;
    double d= 10.22;
    double *pd= &d;
    cout<< pd<< endl;
    cout << *pd<< endl;
    cout<< sizeof(pd)<< endl;

    return 0;
}

#include<iostream>
using namespace std;
int main(){
	int i=10;
	int *p= &i;
	cout<< i<<" " <<*p<< endl;
	i++;
	cout<< i<<" " <<*p<< endl;
	
	int a= *p;
	a++;
	cout<< a<<" " <<*p<< endl; //value of *p remaims same
	
	i=12;
	cout<< i<< endl;
	cout<< *p<< endl;
	*p= 23;
	
	cout<< i<< endl; //p contains ddress of i, *p contains value of i at tht address, therefore, chnging value of *p will change i too.
	cout<< *p<< endl;
	
	(*p)++;
	cout<< i<< endl;
	cout<< *p<< endl; //*p value incremented by one,so i is also incremented by 1
	return 0;
	
}
//Arithmetic operations on Pointers
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    int i=10;
    int *p = &i;
    
    cout<< p<< endl;
    p=p+1; 
    cout<< p<< endl;   //0x7fffc448fe58       


    p=p+2; 
    cout<< p<< endl; //0x7fffc448fe60 { 8 se 9 then a,b,c,d,e,f, 0)  shift of 8}
    p=p-2;
    cout<< p<< endl; //0x7fffc448fe58
    

    return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
   int a = 7;
int *c = &a;
c = c + 1;
cout  << a << "  " << *c << endl;
    

    return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
   int a = 7;
   
   int *c = &a;
   cout <<c<< endl;
    c = c + 3;
    cout<< c << endl;
    

    return 0;
}

//Arrays and Pointers
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
   int a[10];
   
   a[0] = 7;
   a[1] = 17;
	a[2] = 27;
   a[3] = 37;
   a[4] = 47;
   a[5] = 57;
   a[6] = 67;
   a[7] = 87;
   a[8] = 97;
   a[9] = 70;
   
   
   int *c= &a[0];
   int *d= &a[1];
   int *e= &a[2];
   int *f= &a[3];
   int *g= &a[4];
   int *h= &a[5];
   
   cout<< c<< " "<< d<< " "<< e<< " "<< f<< " "<< g<< " "<< h<< endl;
   //0x6ffdc0 0x6ffdc4 0x6ffdc8 0x6ffdcc 0x6ffdd0 0x6ffdd4

    return 0;
}

#include<iostream>
using namespace std;
int main(){
	int a[10];
	cout<< a<< endl;
	cout<< &a[0]<< endl; //same, because we can treat as pointer, size f array=40, size of poiter= 8
	
	a[0]=5;
	a[1]= 10;
	cout<< *a<< endl;
	cout<< *(a+1)<< endl;
	// array cnt be reassigned, array cant be  assigned to a pointr, but a pointer can be assigned to an aray a=/p but p=a
	
	int *p= &a[0];
	
	cout<< a<< endl;
	cout<< p<< endl;
	
	cout<< &a<< endl;
	cout<< &p<< endl; //store somewhere else
	
	//we can do this
	p = a+1;
	//but we cant do this
	a= a+1;
	return 0;
}
//Sum of integers using pointers
#include<iostream>

using namespace std;
int sum(int *ar , int n)
{
    //write your code here
    int sum=0;
    for(int i=0; i< n; i++){
        sum= sum + *ar; //Dereference the pointer to get the value at the current element
        ar++; //move pointer to next location to get the element value
    }
    return sum;
}
int main()
{
	
    int n;
    cin>>n;
    int ar[n];
    for(int i=0;i<n;i++)
    {
        cin>>ar[i];
    }
    int ans = sum(ar,n);
    cout<<ans;
} 

#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    int a[5];
	int *c;
	cout << sizeof(a) << " " << sizeof(c);
    //he size of an integer in most C++ implementations is 4 bytes (32 bits), so the size of the array a is 5 * 4 = 20 bytes.

    return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    int a[] = {1, 2, 3, 4};
	cout << *(a) << " " << *(a+1);
    return 0;
}
//
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    /*int a[6] = {1, 2, 3};
    cout << a << " " << &a;
    
    int a[3] = {1, 2, 3};
	cout << *(a + 2);
	
	int a[6] = {1, 2, 3};
    int *b = a;
    cout << b[2];
    
    int a[] = {1, 2, 3, 4};
    int *p = a++;
    cout << *p << endl;
    return 0;
}
/*#include<iostream>
using namespace std;
int main(){
	/*char a[]= "1,2,3";
	char b[]= "abc";
	
	cout<< a<< endl;
	cout<< b<< endl;
	
	char *c = &b[0];
	cout<< c<< endl;
	
	char c1= 'a';
	char *pc = &c1;
	
	cout<< c1<< endl;
	cout<< pc<< endl; //aÂ¦o it print until it find null value, so take garbae value
	
	char str= abcdwe';
	char *pstr= "abcdwe";
	
	cout<< str<< endl;
	cout<< pstr<< endl;
	
	
	return 0;
}
//Reverse of a string
#include<iostream>

using namespace std;
void func(char *str) 
{
    //write your code here
    if(str == NULL){
        return;
    }
     int length =0;
     while (str[length] != '\0'){
         length++;
     }
     for(int i=0; i< length/2; i++){
         char temp = str[i];
         str[i] = str[length-i-1];
         str[length-i-1]= temp;

     }
    
}
int main()
{
    char ch[100001];
    int t;
    cin>>t;
    while(t--)
    {
        cin>>ch;
        func(ch);
        cout<<ch;
	cout<<endl;
    }
}

//Pointers and Functions
#include<iostream>
using namespace std;
void print(int *p){
	cout<< *p << endl;
}
void incrementpointer(int *p){
	p= p+1;
}
void increment(int *p){
	(*p)++;
}
int main(){
	int i=10;
	int *p= &i;
	cout<< p<< endl;
	incrementpointer(p);
	cout<< p<< endl;
	
	cout<< *p<< endl;
	increment(p);
	cout<< *p<< endl;
	
	return 0;
}

#include<iostream>
using namespace std;

int sum(int a[], int size){  //this is pointer
	cout<< sizeof(a)<< endl;
	
}
int main(){
	int a[10]; //this is array
	cout<< sizeof(a)<< endl;
	cout<< sum(a,10)<< endl;
	return 0;
	
}

// so we can just simply use it as pointer as well recieveing same output
#include<iostream>
using namespace std;

int sum(int *a, int size){  //this is pointer
	int ans=0;
	for(int i=0; i< size; i++){
		ans+= a[i];
		
	}
	
	
}
int main(){
	int a[10]; //this is array
	cout<< sizeof(a)<< endl;
	cout<< sum(a,10)<< endl;
	return 0;
	
}*/
#include<iostream>
using namespace std;
/*void changeSign(int *p){
  *p = (*p)  *  -1;
}

int main(){
  int a = 10;
  changeSign(&a);
  cout << a << endl;
  return 0;
  void fun(int a[]) {
    cout << a[0] << " ";
}

int main() {
    int a[] = {1, 2, 3, 4};
    fun(a + 1);
    cout << a[0];

}
void square(int *p){
 int a = 10;
 p = &a;
 *p = (*p) * (*p);
}

int main(){
 int a = 10;
 square(&a);
 cout << a << endl;
}

//Swap Two Numbers
#include <iostream>

using namespace std;
void swap(int *a,int *b)
{
    int temp= *a;
    *a=*b;
    *b= temp;
	
}
int main()
{
    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    {
        int a,b;
        cin>>a>>b;
        swap(&a , &b);
        cout<<a<<" "<<b;
        cout<<endl;
    }
}*/
#include<iostream>
using namespace std;
int main(){
	int i=10;
	int *p = &i;
	int **p2 = &p;   //A pointer is a variable that stores address of other variable, and what kid of data is to be stored is characterised by
	cout<< p << endl;                // so to store a pointer's address we have to create a pointer pointer
	cout<< p2 << endl;
	
	return 0;
}
#include <iostream>
using namespace std;
int main() {
    // Write C++ code here
    /*int arr[] = {4, 5, 6, 7};
    int *p = (arr + 1);
    cout << *arr + 9;
    return 0;
    int numbers[5];
    int * p;
    p = numbers; 
    *p = 10;
    p = &numbers[2]; 
    *p = 20;
    p--; 
    *p = 30;
    p = numbers + 3;
    *p = 40;
    p = numbers;
    *(p+4) = 50;
    for (int n=0; n<5; n++) {
        cout << numbers[n] << ",";
    }
1.  p is assigned to the address of the first element of the array, and *p = 10 sets the first element to 10.
2. p is assigned to the address of the third element, and *p = 20 sets the third element to 20.
3. p is decremented, pointing to the second element, and *p = 30 sets the second element to 30.
4. p is assigned to the address of the fourth element, and *p = 40 sets the fourth element to 40.
5. p is assigned to the address of the first element, and *(p+4) = 50 sets the fifth element to 50.
So, the output is "10 30 20 40 50".
  

    return 0;
}
/Modify Array
/*
#include <iostream>

using namespace std;

void modify(int *ar, int n) {
   int max = ar[0];
    int min = ar[0];

    for (int i = 1; i < n; i++) { 
        if (ar[i] > max) {
            max = ar[i];
        }
        if (ar[i] < min) {
            min = ar[i];
        }
    }

    for (int i = 0; i < n; i++) {
        if (ar[i] == max) {
            ar[i] = 100;
        }
        else if (ar[i] == min) {
            ar[i] = 0;
        }
    }
}

int main()
{
    int n;
    cin>>n;
    int ar[n];
    for(int i=0;i<n;i++)
    {
        cin>>ar[i];
    }
    modify(ar,n);
    for(int i=0;i<n;i++)
    {
        cout<<ar[i]<<" ";
    }
    return 0;
}
#include <iostream>
using namespace std;
int main()
{
  char arr[20];
  int i;
  for(i = 0; i < 10; i++) {
    *(arr + i) = 65 + i;
  }
  *(arr + i) = '\0';
  cout << arr;
  return 0;
}

#include<iostream>
using namespace std;
void swap (char *x, char *y) 
{
  char *t = x;
  x = y;
  y = t;
}

int main()
{
   char *x = "ninjasquiz";
   char *y = "codingninjas";
   char *t;
   swap(x, y);
   cout<<x << " "<<y;
   t = x;
   x = y;
   y = t; 
   cout<<" "<<x<< " "<<y;
   return 0;
}
#include <iostream>
using namespace std;
int main()
{
  float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};
  float *ptr1 = &arr[0];
  float *ptr2 = ptr1 + 3;
  cout<<*ptr2<<" ";
  cout<< ptr2 - ptr1;
  return 0;
}
*/
#include<iostream>
using namespace std;
int main() {
  char st[] = "ABCD";
  for(int i = 0; st[i] != '\0'; i++) {
     cout << st[i] << *(st)+i << *(i+st) << i[st];
  }
  return 0;
}



